default:
  image: eclipse-temurin:21-jdk-jammy
  tags:
    - opentcs-runner
  before_script:
    # Put GRADLE_USER_HOME into the cache directory so the wrapper and dependencies are not
    # re-downloaded for every job.
    - export GRADLE_USER_HOME=`pwd`/.gradle
  timeout: 15 minutes

include: '.gitlab/docker/codequality/version.yml'

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == "web"

variables:
  GRADLE_OPTS: "-Dorg.gradle.daemon=false"
  DO_BUILD_CODEQUALITY_IMAGE:
    value: "false"
    options:
      - "false"
      - "true"
    description: "Whether ('true') or not ('false') to (re-)build the Docker image for code quality jobs."
  DO_DEPLOY_PRIVATE:
    value: "false"
    options:
      - "false"
      - "true"
    description: "Whether ('true') or not ('false') to deploy artifacts to private (GitLab) repository."
  NO_BUILD_NUMBER:
    value: "false"
    options:
      - "false"
      - "true"
    description: "Whether ('true') or not ('false') to exclude the build number in the artifacts' version number, e.g. for release builds."

stages:
  - build
  - test
  - deploy

build_code_quality_image:
  stage: build
  rules:
    - if: $DO_BUILD_CODEQUALITY_IMAGE == "true"
  image:
    name: gcr.io/kaniko-project/executor:v1.9.1-debug
    entrypoint: [""]
  dependencies: []
  script:
    - echo "Building code quality image with tag ${CODEQUALITY_IMAGE_TAG}..."
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"${CI_REGISTRY}\":{\"auth\":\"$(printf "%s:%s" "${CI_REGISTRY_USER}" "${CI_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
    - '/kaniko/executor
      --context "${CI_PROJECT_DIR}/.gitlab/docker/codequality"
      --dockerfile "${CI_PROJECT_DIR}/.gitlab/docker/codequality/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/codequality:${CODEQUALITY_IMAGE_TAG}"'

build:
  stage: build
  interruptible: true
  dependencies: []
  script:
    - ./gradlew -x check build testClasses -PNO_BUILD_NUMBER="$NO_BUILD_NUMBER"
  artifacts:
    name: 'opentcs-integration-project-build-b$CI_PIPELINE_IID'
    paths:
      - .gradle
      - openTCS-*/build/classes/
      - openTCS-*/build/generated/
      - openTCS-*/build/libs/
      - openTCS-*/build/resources/
      - openTCS-*/build/tmp/
    exclude:
      - .gradle/.tmp/**/*
      - .gradle/caches/**/*
      - .gradle/wrapper/**/*
    expire_in: 1 week
  cache:
    key: build_test_deploy-$(date +%Y-%m)
    paths:
      - .gradle

test:
  stage: test
  interruptible: true
  dependencies:
    - build
  script:
    - echo "Touching build results to prevent Gradle rebuilding them..."
    - find .gradle | xargs touch
    - find . -regex '\./openTCS-[^/]+/build/.*' | xargs touch
    - echo "Running unit tests..."
    - ./gradlew test jacocoLogAggregatedCoverage -PNO_BUILD_NUMBER="$NO_BUILD_NUMBER"
  coverage: '/Branch Coverage: ([0-9.]+)%/'
  artifacts:
    name: 'opentcs-integration-project-test-b$CI_PIPELINE_IID'
    reports:
      junit: openTCS-*/build/test-results/test/TEST-*.xml
    when: always
    expire_in: 1 week
  cache:
    key: build_test_deploy-$(date +%Y-%m)
    paths:
      - .gradle

test-cloning:
  stage: test
  interruptible: true
  dependencies: []
  script:
    - ./gradlew cloneProject -PintegrationName=MyFavouriteCustomer -PpackageName=com.acme
    - test -d build/openTCS-Integration-MyFavouriteCustomer
        || (echo "Expected project directory not found." ; find build/ ; false)
    - test -d build/openTCS-Integration-MyFavouriteCustomer/openTCS-MyFavouriteCustomer-Common/src/main/java/com/acme
        || (echo "Expected package directory not found." ; find build/ ; false)
  cache:
    key: test_cloning-$(date +%Y-%m)
    paths:
      - .gradle

lint:
  stage: test
  interruptible: true
  image: ${CI_REGISTRY_IMAGE}/codequality:${CODEQUALITY_IMAGE_TAG}
  variables:
    CODE_CLIMATE_FILE: gl-code-quality-report.json
  dependencies:
    - build
  script:
    - echo "Touching build results to prevent Gradle rebuilding them..."
    - find .gradle | xargs touch
    - find . -regex '\./openTCS-[^/]+/build/.*' | xargs touch
    - echo "Running CheckStyle checks..."
    - ./gradlew checkstyleMain checkstyleTest checkstyleGuiceConfig
    - echo "Converting CheckStyle reports to CodeClimate report..."
    - violations-command-line -cc $CODE_CLIMATE_FILE -print-violations false -diff-print-violations true -v "CHECKSTYLE" "." ".*checkstyle/.*\.xml$" "Checkstyle"
    - sed -i.bak -e "s,$CI_PROJECT_DIR/,,g" $CODE_CLIMATE_FILE
  artifacts:
    reports:
      codequality: $CODE_CLIMATE_FILE
    when: always
    expire_in: 1 week
  cache:
    key: lint_checkstyle-$(date +%Y-%m)
    paths:
      - .gradle

deploy_private:
  stage: deploy
  rules:
    - if: $DO_DEPLOY_PRIVATE == "true"
  dependencies:
    - build
  script:
    - './gradlew -x check publish
        -PDO_DEPLOY_PRIVATE="true"
        -PNO_BUILD_NUMBER="$NO_BUILD_NUMBER"'
  cache:
    key: build_test_deploy-$(date +%Y-%m)
    paths:
      - .gradle
    policy: pull
