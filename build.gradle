buildscript {
  repositories {
    mavenLocal()
    mavenCentral()
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    // License plugin
    classpath 'gradle.plugin.nl.javadude.gradle.plugins:license-gradle-plugin:0.14.0'
    // Stats plugin
    classpath 'org.kordamp.gradle:stats-gradle-plugin:0.2.2'
    // JaCoCo log plugin
    classpath 'org.barfuin.gradle.jacocolog:gradle-jacoco-log:3.1.0'
  }
}

apply plugin: 'base'
apply plugin: 'distribution'
apply plugin: 'groovy'
apply plugin: 'org.barfuin.gradle.jacocolog'

apply from: "${rootDir}/gradle/common.gradle"
apply from: "${rootDir}/gradle/publishing-common.gradle"

repositories {
  mavenLocal()
  mavenCentral()
}

dependencies {
  implementation localGroovy()
  implementation group: 'commons-io', name: 'commons-io', version: '2.13.0'
}

subprojects {
  apply from: rootProject.file('gradle/common.gradle')
}

distributions {
  main {
    contents.from {
      project(':openTCS-Example-Kernel').ext.collectableDistDir
    }
    contents.from {
      project(':openTCS-Example-KernelControlCenter').ext.collectableDistDir
    }
    contents.from {
      project(':openTCS-Example-ModelEditor').ext.collectableDistDir
    }
    contents.from {
      project(':openTCS-Example-OperationsDesk').ext.collectableDistDir
    }
    contents.from {
      project(':openTCS-Example-Documentation').ext.collectableDistDir
    }
  }
}

task statsAggregate(type: org.kordamp.gradle.stats.AggregateStatsReportTask) {
  subprojects.each { dependsOn("${it.name}:stats") }
}

task subDists {
  dependsOn(':openTCS-Example-Kernel:installDist')
  dependsOn(':openTCS-Example-KernelControlCenter:installDist')
  dependsOn(':openTCS-Example-ModelEditor:installDist')
  dependsOn(':openTCS-Example-OperationsDesk:installDist')
  dependsOn(':openTCS-Example-Documentation:installDist')
}

installDist.dependsOn subDists

distZip {
  archiveClassifier = 'bin'
  dependsOn subDists
}

distTar {
  enabled = false
  archiveClassifier = 'bin'
  dependsOn subDists
}

task distSrcZip(type: Zip) {
  archiveClassifier = 'src'
  from "${rootDir}"

  includes << 'config/**'
  includes << 'gradle/**'
  includes << 'lib/**'
  includes << 'openTCS-*/**'
  includes << 'src/**'
  includes << '.nb-gradle-properties'
  includes << '*.gradle'
  includes << 'gradlew'
  includes << 'gradlew.bat'
  includes << 'README.md'

  excludes << '.gradle'
  excludes << '**/build'
}

artifacts {
  archives distZip
  archives distTar
  archives distSrcZip
}

build {
  subprojects.each { dependsOn("${it.name}:build") }
  dependsOn installDist
}

// tag::cloneTask
task cloneProject(type: JavaExec) {
  main = 'org.opentcs.scripts.CloneScript'
 
  classpath = sourceSets.main.runtimeClasspath
 
  def integrationName = 'MyCustomProject'
  def classPrefix = 'Custom'
  def packageName = 'com.example'
  if (project.hasProperty('integrationName')) {
    integrationName = project.getProperty('integrationName')
  }
  if (project.hasProperty('classPrefix')) {
    classPrefix = project.getProperty('classPrefix')
  }
  if (project.hasProperty('packageName')) {
    packageName = project.getProperty('packageName')
  }
  
  // Pass command-line argument to script, if any.
  args integrationName, classPrefix, packageName
}
// tag::cloneTask

subprojects.each { publish.dependsOn("${it.name}:publish") }

publishing {
  publications {
    maven(MavenPublication) {
      artifact distZip
      artifact distSrcZip

      pom {
        artifactId = 'distribution'
      }
    }
  }
}