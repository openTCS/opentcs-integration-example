plugins {
  // To use AsciiDoctor for documentation
  id 'org.asciidoctor.jvm.convert' version '3.3.2'
  id 'org.asciidoctor.jvm.pdf' version '3.3.2'
}

apply from: "${rootDir}/gradle/dependency-versions.gradle"
apply from: "${rootDir}/gradle/java-project.gradle"
apply from: "${rootDir}/gradle/java-artifacts.gradle"
apply from: "${rootDir}/gradle/java-codequality.gradle"
apply plugin: 'org.kordamp.gradle.stats'

apply plugin: 'distribution'

def baselineDocsDir = file("$buildDir/opentcs-baseline-documentation")
def commAdapterDocsDir = file("$buildDir/commadapter-documentation")
def commAdapterDocsImagesDir = file("$commAdapterDocsDir/images")

ext.collectableDistDir = file("$buildDir/install")

configurations {
  baselineDoc
}

dependencies {
  baselineDoc group: 'org.opentcs', name: 'opentcs-documentation', version: openTcsBaselineVersion, ext: 'zip'
}

distributions {
  main {
    contents.from(commAdapterDocsDir) {
      into('developer/commadapter')
    }
    contents.from(baselineDocsDir) {
      into('opentcs-baseline-documentation')
    }
  }
}

task unzipBaselineDoc(type: Copy) {
  File baselineDocZip = configurations.baselineDoc.singleFile
  from zipTree(baselineDocZip)
  into("$baselineDocsDir")
  eachFile { file ->
    // Remove the top-level folder
    file.path = file.path.replaceFirst("[^/]*/", "")
  }
  includeEmptyDirs false
}
installDist.dependsOn unzipBaselineDoc

task renderDocs {
  dependsOn 'asciidoctor'
}
installDist.dependsOn renderDocs

asciidoctor {
  // Document type: article (default), book, inline, manpage)
  options doctype: 'book'

  // Where to look for AsciiDoc files. Default: src/docs/asciidoc
  // sourceDir = file("src/docs/users-guide")
  baseDirFollowsSourceDir()
  
  // Where to put the rendered documents. Default: $buildDir/asciidoc.
  outputDir = commAdapterDocsDir
	
  sources {
    include 'opentcs-example-documentation.adoc'
  }
  
  outputOptions {
    // Whether to put backends' outputs into separate subdirectories
    separateOutputDirs = false
    // Set the backends the processor should use: html5 (default), docbook, manpage, pdf, deckjs
    backends = ['html5', 'pdf']
  }
  
  attributes 'source-highlighter': 'coderay',
             'coderay-linenums-mode': 'table',
  // Custom attributes that we want to be substituted in the document.
             'common-javaSrc': project(':openTCS-Example-Common').javaSrcDir,
             'buildDate': new Date().format('yyy-MM-dd'),
             'imagesoutdir': commAdapterDocsImagesDir, // Set the images directory for the output of asciidoctor-diagram
             // 'imagesdir': 'images',
  // The directory where the theme file is located
  //           'pdf-stylesdir': 'themes',
  // The name of the YAML theme file to load. If the name ends with ".yml", it's
  // assumed to be the complete name of the file. Otherwise, "-theme.yml" is appended
  // to the name to make the file name.
  //           'pdf-style': 'custom',
  // Include a table of contents (on the left side, when rendering to HTML)
  toc: 'left',
  toclevels: '3',
  // Turn on section numbering.
  sectnums: '1',
  // Depth of section numbering
  sectnumlevels: '6',
  // Whether to use icons for admonitions. Possible values: 'font' to use
  // FontAwesome glyphs or anything else to use graphics files.
  // Note: FontAwesome requires internet connectivity for viewing the resulting
  // HTML output...
  //  icons: '1',
  icons: 'font',
  // Where to find the icons. Default: ./images/icons.
  // iconsdir: './images/icons',
  // The type of the icons.
  //  icontype: 'svg',
  // Allow attributes in links (target="_blank" etc.) to be used.
  linkattrs: true,
  // Document encoding.
  encoding: 'utf-8',
  // Render page numbers in the PDF
  pagenums: '1',
  // Experimental features (rendering keyboard shortcuts, menu items, etc.)
  experimental: true

  resources {
    from(sourceDir) {
      include '**/*.jpg'
      include '**/*.png'
      include '**/*.svg'
      exclude 'samples'
      exclude 'themes'
    }
  }
  
  doLast{
    delete "$commAdapterDocsDir/.asciidoctor"
  }
}
